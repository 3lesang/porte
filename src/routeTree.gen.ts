/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ViewImport } from './routes/_view'
import { Route as AuthImport } from './routes/_auth'
import { Route as AdminImport } from './routes/_admin'
import { Route as AdminIndexImport } from './routes/_admin/index'
import { Route as AdminSettingImport } from './routes/_admin/setting'
import { Route as AdminAboutImport } from './routes/_admin/about'
import { Route as AdminNotesIndexImport } from './routes/_admin/notes/index'
import { Route as ViewNotesIdImport } from './routes/_view/notes/$id'
import { Route as AuthAuthSignupImport } from './routes/_auth/auth/signup'
import { Route as AuthAuthLoginImport } from './routes/_auth/auth/login'

// Create/Update Routes

const ViewRoute = ViewImport.update({
  id: '/_view',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/_admin',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminSettingRoute = AdminSettingImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => AdminRoute,
} as any)

const AdminAboutRoute = AdminAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AdminRoute,
} as any)

const AdminNotesIndexRoute = AdminNotesIndexImport.update({
  id: '/notes/',
  path: '/notes/',
  getParentRoute: () => AdminRoute,
} as any)

const ViewNotesIdRoute = ViewNotesIdImport.update({
  id: '/notes/$id',
  path: '/notes/$id',
  getParentRoute: () => ViewRoute,
} as any)

const AuthAuthSignupRoute = AuthAuthSignupImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => AuthRoute,
} as any)

const AuthAuthLoginRoute = AuthAuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_admin': {
      id: '/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_view': {
      id: '/_view'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ViewImport
      parentRoute: typeof rootRoute
    }
    '/_admin/about': {
      id: '/_admin/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AdminAboutImport
      parentRoute: typeof AdminImport
    }
    '/_admin/setting': {
      id: '/_admin/setting'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof AdminSettingImport
      parentRoute: typeof AdminImport
    }
    '/_admin/': {
      id: '/_admin/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
    '/_auth/auth/login': {
      id: '/_auth/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthAuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_auth/auth/signup': {
      id: '/_auth/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthAuthSignupImport
      parentRoute: typeof AuthImport
    }
    '/_view/notes/$id': {
      id: '/_view/notes/$id'
      path: '/notes/$id'
      fullPath: '/notes/$id'
      preLoaderRoute: typeof ViewNotesIdImport
      parentRoute: typeof ViewImport
    }
    '/_admin/notes/': {
      id: '/_admin/notes/'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof AdminNotesIndexImport
      parentRoute: typeof AdminImport
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminAboutRoute: typeof AdminAboutRoute
  AdminSettingRoute: typeof AdminSettingRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminNotesIndexRoute: typeof AdminNotesIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAboutRoute: AdminAboutRoute,
  AdminSettingRoute: AdminSettingRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminNotesIndexRoute: AdminNotesIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface AuthRouteChildren {
  AuthAuthLoginRoute: typeof AuthAuthLoginRoute
  AuthAuthSignupRoute: typeof AuthAuthSignupRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAuthLoginRoute: AuthAuthLoginRoute,
  AuthAuthSignupRoute: AuthAuthSignupRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface ViewRouteChildren {
  ViewNotesIdRoute: typeof ViewNotesIdRoute
}

const ViewRouteChildren: ViewRouteChildren = {
  ViewNotesIdRoute: ViewNotesIdRoute,
}

const ViewRouteWithChildren = ViewRoute._addFileChildren(ViewRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof ViewRouteWithChildren
  '/about': typeof AdminAboutRoute
  '/setting': typeof AdminSettingRoute
  '/': typeof AdminIndexRoute
  '/auth/login': typeof AuthAuthLoginRoute
  '/auth/signup': typeof AuthAuthSignupRoute
  '/notes/$id': typeof ViewNotesIdRoute
  '/notes': typeof AdminNotesIndexRoute
}

export interface FileRoutesByTo {
  '': typeof ViewRouteWithChildren
  '/about': typeof AdminAboutRoute
  '/setting': typeof AdminSettingRoute
  '/': typeof AdminIndexRoute
  '/auth/login': typeof AuthAuthLoginRoute
  '/auth/signup': typeof AuthAuthSignupRoute
  '/notes/$id': typeof ViewNotesIdRoute
  '/notes': typeof AdminNotesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_admin': typeof AdminRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/_view': typeof ViewRouteWithChildren
  '/_admin/about': typeof AdminAboutRoute
  '/_admin/setting': typeof AdminSettingRoute
  '/_admin/': typeof AdminIndexRoute
  '/_auth/auth/login': typeof AuthAuthLoginRoute
  '/_auth/auth/signup': typeof AuthAuthSignupRoute
  '/_view/notes/$id': typeof ViewNotesIdRoute
  '/_admin/notes/': typeof AdminNotesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/about'
    | '/setting'
    | '/'
    | '/auth/login'
    | '/auth/signup'
    | '/notes/$id'
    | '/notes'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/about'
    | '/setting'
    | '/'
    | '/auth/login'
    | '/auth/signup'
    | '/notes/$id'
    | '/notes'
  id:
    | '__root__'
    | '/_admin'
    | '/_auth'
    | '/_view'
    | '/_admin/about'
    | '/_admin/setting'
    | '/_admin/'
    | '/_auth/auth/login'
    | '/_auth/auth/signup'
    | '/_view/notes/$id'
    | '/_admin/notes/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AdminRoute: typeof AdminRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  ViewRoute: typeof ViewRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AdminRoute: AdminRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  ViewRoute: ViewRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_admin",
        "/_auth",
        "/_view"
      ]
    },
    "/_admin": {
      "filePath": "_admin.tsx",
      "children": [
        "/_admin/about",
        "/_admin/setting",
        "/_admin/",
        "/_admin/notes/"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/auth/login",
        "/_auth/auth/signup"
      ]
    },
    "/_view": {
      "filePath": "_view.tsx",
      "children": [
        "/_view/notes/$id"
      ]
    },
    "/_admin/about": {
      "filePath": "_admin/about.tsx",
      "parent": "/_admin"
    },
    "/_admin/setting": {
      "filePath": "_admin/setting.tsx",
      "parent": "/_admin"
    },
    "/_admin/": {
      "filePath": "_admin/index.tsx",
      "parent": "/_admin"
    },
    "/_auth/auth/login": {
      "filePath": "_auth/auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/auth/signup": {
      "filePath": "_auth/auth/signup.tsx",
      "parent": "/_auth"
    },
    "/_view/notes/$id": {
      "filePath": "_view/notes/$id.tsx",
      "parent": "/_view"
    },
    "/_admin/notes/": {
      "filePath": "_admin/notes/index.tsx",
      "parent": "/_admin"
    }
  }
}
ROUTE_MANIFEST_END */
